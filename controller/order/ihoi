const updateOrderProductsController=async (req,res) => {
  if(Object.keys(req.body).length === 0 || !req.body.products){
      return displayCustomError(res,400,false,"You must send Products");
  } else { try{
      const id=req.params.orderId;
      const oldOrder = await Order.findById(id).exec();
      if(oldOrder) {
          if((req.user._id).equals(oldOrder.user)){ 
              let nonAvailableProducts=[]
              let updatedProducts=[];
             for (prod of req.body.products){
                  //    let data={exists:false,qty:0,price:0};
                  //    for(entry of oldOrder.orderProducts){
                  //        if((entry.product).equals(prod.product)) { 
                  //         data={exists:true,qty:entry.qty,price:entry.price};break; }
                  //    }
                    let data=checkOrderProductExistence(oldOrder,prod);
                     if(data.exists){
                         let diffqty=data.qty - prod.qty;
                          if(diffqty > 0)
                              updatedProducts.push({productId:prod.product,addedQty:diffqty,qty:prod.qty})
                          else if(diffqty < 0){
                              let product=await Product.findById(prod.product).exec();
                              let finalQty=product.qty - (-1 *diffqty);
                              if(finalQty < 0 ) nonAvailableProducts.push({producId:prod.product ,availablePieces:product.qty, productName:product.productname});
                              else updatedProducts.push({productId:prod.product,finalqty:finalQty,qty:prod.qty,diffqty:(-1*diffqty)})
                              }}
                     else  {  
                         let   product=await Product.findById(prod.product).exec();
                               let finalQty=product.qty - prod.qty;
                               if(finalQty < 0 ) nonAvailableProducts.push({producId:prod.product ,availablePieces:product.qty, productName:product.productname});
                               else updatedProducts.push({productId:prod.product,finalqty:finalQty,qty:prod.qty,diffqty:prod.qty,})}}
                  if(nonAvailableProducts.length != 0) return displayError(res,400,false,"Cant't update order, some products aren't avilable",{nonAvailableProducts})
                  if(updatedProducts.length == 0 ) return displayCustomError(res,400,false,"There new products to be updated");
                  for(entry of updatedProducts){
                      let product=await Product.findById(entry.productId).exec();
                      if (entry.addedQty) {await Product.updateOne({_id:entry.productId},{qty:(product.qty+entry.addedQty)}); 
                        oldOrder.totalQty-= entry.addedQty;
                        oldOrder.orderPrice-= entry.addedQty * product.price;  
                        }
                   
                        else if (entry.finalqty && entry.finalqty > 0 ){ await Product.updateOne({_id:entry.productId},{qty:entry.finalqty});
                        oldOrder.totalQty+= entry.diffqty;
                        oldOrder.orderPrice+= entry.diffqty * product.price;
                  }
                      
                      else  {await Product.updateOne({_id:entry.productId},{qty:entry.finalqty,availability:false});
                      oldOrder.totalQty+= entry.diffqty;
                      oldOrder.orderPrice+= entry.diffqty * product.price;  
                  }
                  }
                  if(oldOrder.totalQty < 0) oldOrder.totalQty=0;
                  if( oldOrder.orderPrice < 0)  oldOrder.orderPrice=0;
             let order= await Order.findByIdAndUpdate({_id:id},{orderProducts:req.body.products,totalQty:oldOrder.totalQty,orderPrice:oldOrder.orderPrice},{new:true});
             return displayData(res,200,true,"Order has been successfully updated",{order});

              }
   else return displayCustomError(res,401,false,"You are unauthorized to perform that action");}
  else return displayCustomError(res,404,false,"There is no such  order exists")
  }catch(err){return displayError(res,500,false,"Something went Wrong",err)}}}